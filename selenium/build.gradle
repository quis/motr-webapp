import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group 'uk.gov.dvsa.motr.selenium'
version null

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.53.1'
    compile group: 'org.testng', name: 'testng', version: '6.10'
    compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.84'
    compile("org.uncommons:reportng:1.1.4") {
        exclude group: "org.testng", module: "testng"
    }
    compile "com.google.inject:guice:4.1.0"
}

task selenium(type: Test) {

    testLogging {
        events = [TestLogEvent.PASSED,
                  TestLogEvent.SKIPPED,
                  TestLogEvent.FAILED,
                  TestLogEvent.STANDARD_OUT]
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showStackTraces = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    useTestNG{
        options ->
            options.parallel = 'classes' //modes: methods, tests, classes or instances.
            options.threadCount = 1
            options.useDefaultListeners = true
            options.listeners << 'org.uncommons.reportng.HTMLReporter'
            options.listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        suites 'resources/PreSms.xml'
    }

    systemProperties = (Map<String, String>)System.getProperties().findAll {it.key.startsWith("test.")}
}

task selenium_new(type: Test) {

    testLogging {
        events = [TestLogEvent.PASSED,
                  TestLogEvent.SKIPPED,
                  TestLogEvent.FAILED,
                  TestLogEvent.STANDARD_OUT]
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showStackTraces = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    useTestNG{
        options ->
            options.parallel = 'classes' //modes: methods, tests, classes or instances.
            options.threadCount = 1
            options.useDefaultListeners = true
            options.listeners << 'org.uncommons.reportng.HTMLReporter'
            options.listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        suites 'resources/PostSms.xml'
    }



    systemProperties = (Map<String, String>)System.getProperties().findAll {it.key.startsWith("test.")}
}

test.dependsOn selenium
